/*
 * CTcpAccepEvt.cpp
 *
 *  Created on: 2015年10月23日
 *      Author: lixiang
 */

#include "CTcpAccepEvt.h"
#include <event2/event.h>
#include "com_log.h"
#include<stdio.h>
#include <stdlib.h>
#include<unistd.h>
#include<string.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<netinet/in.h>
#include<netdb.h>
#include <strings.h>
#include <string.h>
#include <errno.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include "nedmalloc.h"
sdfasdfads
#include "CSkyRtcpAnaly.h"
using nedalloc::nedcalloc;
using nedalloc::nedfree;
namespace myselfstock
{

CTcpAccepEvt::CTcpAccepEvt(int acceptsockt):fTCPReadingState(AWAITING_DOLLAR),m_fNextTCPReadSize(0),m_SendTCPReadSize(0),m_GetRTPdataErrNum(0)
{
    // TODO Auto-generated constructor stub
    m_Type = WOZAEVT;
    m_ReadFd=acceptsockt;
    m_AlreadyNumFirst=0;
    m_ReadNumOneSc=0;
    m_Kbps=0;
    m_RtpAlreadySend=0;
    m_RtpSeq=ERRORLENTH;
    m_IsLastTimeWr=false;
    m_DeviceTyp=0;
    m_UdpCliSckt=0;
    m_pRtpInfo=NULL;
    m_pRtpQue=NULL;
    m_IsGetIpcAccordSN_ed=false;
    evutil_timerclear(&m_Last);
    evutil_timerclear(&m_Now);
    evutil_timerclear(&m_OneSc);
    m_OneSc.tv_sec = 1;
    m_pRtcp=NULL;
    SetTimeOut(5);
    bzero(m_recvbuf,MAXLEN);
    m_AlreadyNum=0;
    m_pMangEVT=CMangEVT::GetInstance();
    m_pSRtcpAna=new CSkyRtcpAnaly();
    INIT_TS_LOG;
}

CTcpAccepEvt::~CTcpAccepEvt()
{
    // TODO Auto-generated destructor stub
    CloseEvt();
    m_pMangEVT->DelRtpQue(m_Sn);
    CMangEVT::Destroy();
    delete m_pSRtcpAna;
    CLOSE_TS_LOG;
}
void CTcpAccepEvt::CallbackAcept(evutil_socket_t fd, short event, void *arg)
{
    CTcpAccepEvt* pCStock=(CTcpAccepEvt*)arg;
    int ret;
    switch (event)
    {
    case EV_READ:
        ret=pCStock->ReadData();
        if (-2 == ret)
        {
            switch (pCStock->m_DeviceTyp)
            {
            case 0x01:
                TSever_LOG_Error("read error app app");
                break;
            case 0x02:
                TSever_LOG_Error("read error  ipc ipc");
                break;
            }
            pCStock->m_pMangEVT->DelOneEvt((CEventBase*) arg);
        }
        break;
	case EV_WRITE:
		ret = pCStock->WriteData();
		if (-2 == ret)
		{
			switch (pCStock->m_DeviceTyp)
			{
			case 0x01:
				TSever_LOG_Error("write error app app");
				break;
			case 0x02:
				TSever_LOG_Error("write error  ipc ipc");
				break;
			}
			pCStock->m_pMangEVT->DelOneEvt((CEventBase*) arg);
		}
		break;
    case EV_TIMEOUT:
        if(0x01==pCStock->m_DeviceTyp)//app
        {
        	ret=pCStock->WriteData();
            if (-2 == ret)
            {
                switch (pCStock->m_DeviceTyp)
                {
                case 0x01:
                    TSever_LOG_Error("write error app app");
                    break;
                case 0x02:
                    TSever_LOG_Error("write error  ipc ipc");
                    break;
                }
                pCStock->m_pMangEVT->DelOneEvt((CEventBase*) arg);
            }
/*            if (!(pCStock->m_IsGetIpcAccordSN_ed))
            {
                TSever_LOG_Error();
                CEventBase* tmp = pCStock->m_pMangEVT->GetIpcAccordSN(pCStock->m_Sn);
                if (tmp)
                {
                    tmp->m_SendToApp = pCStock->m_ReadFd;
                }
                pCStock->m_IsGetIpcAccordSN_ed=true;
            }*/
        }
        else if (0x02==pCStock->m_DeviceTyp)//ipc
        {
            TSever_LOG_Error("stream error,ipc offline maybe");
            pCStock->m_pMangEVT->DelOneEvt((CEventBase*) arg);
        }
//        TSever_LOG_Error();
        //        event_del(&ServerEvent);
 //       close(fd);
        break;
    default:
        break;
    }
    return;
}
int CTcpAccepEvt::Init()
{
    m_UdpCliSckt=socket(AF_INET, SOCK_DGRAM, 0);
    if(m_UdpCliSckt<0)
    {
        TSever_LOG_Error("CloseEvt() error:%s",strerror(errno));
        return -1;
    }
    evutil_make_socket_nonblocking(m_UdpCliSckt);
    evutil_make_socket_nonblocking(m_ReadFd);
    m_WzaPort=8765;
    bzero(&m_WzaIp, sizeof(m_WzaIp));
    m_WzaIp.sin_family = AF_INET;
    m_WzaIp.sin_port = htons(m_WzaPort);
//    m_WzaIp.sin_addr.s_addr = inet_addr("127.0.0.1");
    m_WzaIp.sin_addr.s_addr = inet_addr("10.0.0.109");
    return 0;
}
int CTcpAccepEvt::CreateEvt()
{
}
int CTcpAccepEvt::CloseEvt()
{
    if (0 != m_ReadFd)
    {
        if (evutil_closesocket(m_ReadFd) < 0)
        {
            TSever_LOG_Error("CloseEvt() m_ReadFd error:%s", strerror(errno));
            return -1;
        }
    }
    if (0 != m_UdpCliSckt)
    {
        if (evutil_closesocket(m_UdpCliSckt) < 0)
        {
            TSever_LOG_Error("CloseEvt() m_UdpCliSckt error:%s", strerror(errno));
            return -1;
        }
    }
    if (0 != m_SendToApp)
    {
        if (evutil_closesocket(m_SendToApp) < 0)
        {
            TSever_LOG_Error("CloseEvt() m_SendToApp error:%s", strerror(errno));
            return -1;
        }
    }

    TSever_LOG_Error();
    return 0;
}
/*int CTcpAccepEvt::SetTimeOut(int second)
{
    evutil_timerclear(&m_TimeOut);
    m_TimeOut.tv_sec = second;
    return 0;
}*/
int CTcpAccepEvt::GetType()
{
    return m_Type;
}
unsigned long long ntohll(unsigned long long val)
{
         return (((unsigned long long )ntohl((int)((val << 32) >> 32))) << 32) | (unsigned int)ntohl((int)(val >> 32));
}
int CTcpAccepEvt::GetRtpInfo(uint8_t * prtpdata,uint64_t &rtpseq,bool &isIframe)
{
//	rtpseq = prtpdata[2] << 8 | prtpdata[3];
//	rtpseq=prtpdata[16]<<56|prtpdata[17]<<48|prtpdata[18]<<40|prtpdata[19]<<32|prtpdata[20]<<24|prtpdata[21]<<16|prtpdata[22]<<8|prtpdata[23];
	uint64_t tmp;
	memcpy(&tmp,prtpdata+16,8);
	rtpseq=ntohll(tmp);
//	TSever_LOG_Error("rtpseq=%ulld 0x%x",rtpseq,prtpdata[1]);
	if (prtpdata[1] & 0x80)
	{
//		TSever_LOG_Error("I frame come rtp num=%ulld",rtpseq);
		isIframe = true;
	}
	else
	{
		isIframe = false;
	}
	return 0;
}
int CTcpAccepEvt::SendToRtpQue(unsigned short len,uint8_t* rtpdata)
{
	uint64_t rtpseq;//extension head 8 Bytes
	bool isIframe;
	GetRtpInfo(rtpdata+4,rtpseq,isIframe);
	m_pRtpQue->ApendRtpData(rtpseq,rtpdata,len,isIframe);
	return 0;
}
int CTcpAccepEvt::GetDeviceInfo()
{
    m_DeviceTyp=m_recvfirst[0];
    if((0x01!=m_DeviceTyp)&&(0x02!=m_DeviceTyp)){
        TSever_LOG_Error("recv m_DeviceTyp error");
        return -1;
    }
    switch (m_DeviceTyp)
    {
    case 0x01:
        TSever_LOG_Error("coming device app app");
        m_pMangEVT->ChangToWriteReadEvt((CEventBase*)this);
        break;
    case 0x02:
        TSever_LOG_Error("coming device ipc ipc");
        break;
    }

    strncpy(m_Sn,m_recvfirst+1,sizeof(m_Sn));
    m_pRtpQue=m_pMangEVT->GetInstanceRtpQue(m_Sn);
    if(!m_pRtpQue){
    	return -1;
    }
    return 0;
}
event_callback_fn CTcpAccepEvt::GetCallbackAddr()
{
    return CallbackAcept;
}
int CTcpAccepEvt::SendToAppOnly()
{
	int ret;
	if (m_pRtpInfo)
	{
		m_pMangEVT->ChangToWriteReadEvt((CEventBase*) this);
        if ((ret = write(m_ReadFd, m_pRtpInfo->rtpdata + m_RtpAlreadySend, m_pRtpInfo->rtplen-m_RtpAlreadySend)) == -1)
        {
            if((errno==EAGAIN)||(errno==EWOULDBLOCK))
            {
                TSever_LOG_Error("sento() error:%s", strerror(errno));
                return -1;
            }
            else if(errno==EBADF)
            {
                TSever_LOG_Error("sento() error:%s", strerror(errno));
                return -2;
            }
            else
            {
                TSever_LOG_Error("sento() error:%s", strerror(errno));
                return -2;
            }
		}
		else
		{
			m_RtpAlreadySend = m_RtpAlreadySend + ret;
		}
        if(m_RtpAlreadySend==m_pRtpInfo->rtplen){
        	m_RtpAlreadySend=0;
        	m_pRtpInfo=NULL;
        }
	}
	return 0;
}
int CTcpAccepEvt::SendToIpcOnly()
{
	int ret = 0;
	if (m_pRtcp)
	{
		if ((ret = write(m_ReadFd, m_pRtcp->rtcpdata + m_pRtcp->curpos, m_pRtcp->rtcplen - m_pRtcp->curpos)) == -1)
		{
			if ((errno == EAGAIN) || (errno == EWOULDBLOCK))
			{
				TSever_LOG_Error("sento() error:%s", strerror(errno));
				return -1;
			}
			else if (errno == EBADF)
			{
				TSever_LOG_Error("sento() error:%s", strerror(errno));
				return -2;
			}
			else
			{
				TSever_LOG_Error("sento() error:%s", strerror(errno));
				return -2;
			}
		}
		else
		{
			m_pRtcp->curpos = m_pRtcp->curpos + ret;
		}
		if (m_pRtcp->curpos == m_pRtcp->rtcplen)
		{
			nedfree((void*)m_pRtcp);
			m_pRtcp = NULL;
		}
		return 0;
	}
	return -1;
}
int CTcpAccepEvt::SendToIpc()
{

	if (!m_pRtcp)
	{
		m_pRtcp = m_pSRtcpAna->GetRtcpData();
		if (!m_pRtcp)
		{
			struct timeval tmp;
			evutil_timerclear(&tmp);
			tmp.tv_sec = 5;
			m_pMangEVT->ChangToTimeOutReadEvt((CEventBase*) this, &tmp);
			return -1;
		}
		else
		{
			return SendToIpcOnly();
		}

	}
	else
	{
		return SendToIpcOnly();
	}
	return 0;
}
int CTcpAccepEvt::SendToApp()
{
	if (!m_pRtpInfo)
	{
		m_pRtpInfo = m_pRtpQue->GetRtpData(m_RtpSeq);
		if (!m_pRtpInfo)
		{
			TSever_LOG_Error("GetRtpData error");
			m_GetRTPdataErrNum++;
			if (GETRTPDATAERRNUMMAX < m_GetRTPdataErrNum)
			{
				return -2;
//				m_pMangEVT->DelOneEvt((CEventBase*) this);//失败10次表明没有流上来了
			}
			else
			{
				struct timeval tmp;
			    evutil_timerclear(&tmp);
			    tmp.tv_usec = 1000*5;
				m_pMangEVT->ChangToTimeOutReadEvt((CEventBase*) this,&tmp);
			}
			return -1;
		}
		else
		{
			m_GetRTPdataErrNum = 0;
			return SendToAppOnly();
		}
	}
	else
	{
		return SendToAppOnly();
	}
}
int CTcpAccepEvt::WriteData()
{
    switch (m_DeviceTyp)
	{
	case 0x01: //appp
		return SendToApp();//判断返回值
		break;
	case 0x02:
		return SendToIpc();//所有数据send完后改变成可读与超时事件
		break;
	}
	return 0;
}
int CTcpAccepEvt::ReadData()
{
    int num;
    char* tmp = NULL;
    u_int8_t c;
    struct timeval diff;
    if (!m_IsLastTimeWr)
    {
        evutil_gettimeofday(&m_Last, NULL);
        m_IsLastTimeWr=true;
    }
/*    if (FIRSTREAD == fTCPReadingState)
    {
        TSever_LOG_Error();
        num = recv(m_ReadFd, m_recvfirst + m_AlreadyNumFirst, FIRSTRDLEN - m_AlreadyNumFirst, 0);
        if(0==num){
            TSever_LOG_Error("recv num =00000000000000000000000000000000000,FIRSTRDLEN - m_AlreadyNumFirst=%d",FIRSTRDLEN - m_AlreadyNumFirst);
            return -2;
        }
        else if (num <0)
        {
            TSever_LOG_Error("recv fTCPReadingState %d error:%s", FIRSTREAD, strerror(errno));
            return -1;
        }
        m_AlreadyNumFirst = m_AlreadyNumFirst + num;
        //    TSever_LOG_Error("revalread=%d num=%d", m_AlreadyNum, num);
        if (FIRSTRDLEN == m_AlreadyNumFirst)
        {
            if(GetDeviceInfo()<0)
            {
                return -2;
            }
            int ret = send(m_ReadFd, "ok", 2, 0);
            if (ret < 0)
            {
                TSever_LOG_Error("sento(ok) error:%s", strerror(errno));
                return -2;
            }
            m_AlreadyNumFirst = 0;
            fTCPReadingState = AWAITING_DOLLAR;
        }

    }*/
    //else if (fTCPReadingState != AWAITING_PACKET_DATA)
    if (fTCPReadingState != AWAITING_PACKET_DATA)
    {
        num = recv(m_ReadFd, &c, 1, 0);
        if(0==num){
            TSever_LOG_Error("recv num =00000000000000000000000000000000000");
            return -2;
        }
        else if (num < 0)
        {
            TSever_LOG_Error("recv fTCPReadingState %d error:%s", fTCPReadingState, strerror(errno));
            return -1;
        }
    }
    switch (fTCPReadingState)
    {
    case AWAITING_DOLLAR:
    {
        if (c == '$')
        {
            fTCPReadingState = AWAITING_STREAM_CHANNEL_ID;
            m_recvbuf[0]=c;
        }
        break;
    }
    case AWAITING_STREAM_CHANNEL_ID:
    {
        m_fStreamChannelId = c;
//        TSever_LOG_Error("m_fStreamChannelId=%d",m_fStreamChannelId);
        fTCPReadingState = AWAITING_SIZE1;
        m_recvbuf[1]=c;
        break;
    }
    case AWAITING_SIZE1:
    {
        // The byte that we read is the first (high) byte of the 16-bit RTP or RTCP packet 'size'.
        m_fSizeByte1 = c;
        m_recvbuf[2]=c;
        fTCPReadingState = AWAITING_SIZE2;
        break;
    }
    case AWAITING_SIZE2:
    {
        // The byte that we read is the second (low) byte of the 16-bit RTP or RTCP packet 'size'.
        unsigned short size = (m_fSizeByte1 << 8) | c;
        m_fNextTCPReadSize=size;
        m_recvbuf[3]=c;
        fTCPReadingState = AWAITING_PACKET_DATA;
        break;
    }
    case AWAITING_PACKET_DATA:
    {
        num = recv(m_ReadFd, m_recvbuf + 4 + m_AlreadyNum, m_fNextTCPReadSize - m_AlreadyNum, 0);
        if (0 == num)
        {
            TSever_LOG_Error("recv num =00000000000000000000000000000000000,m_fNextTCPReadSize - m_AlreadyNum=%d",m_fNextTCPReadSize - m_AlreadyNum);
            return -2;
        }
        else if (num < 0)
        {
            TSever_LOG_Error("recv fTCPReadingState %d error:%s", AWAITING_PACKET_DATA, strerror(errno));
            return -1;
        }
        m_AlreadyNum = m_AlreadyNum + num;
        //    TSever_LOG_Error("revalread=%d num=%d", m_AlreadyNum, num);
        if (m_fNextTCPReadSize == m_AlreadyNum)
        {
        	m_SendTCPReadSize=m_fNextTCPReadSize+4;
            switch (m_fStreamChannelId)
        	{
        	case 0x00: //rtp
        		SendToRtpQue(m_SendTCPReadSize,m_recvbuf);
        		break;
        	case 0x01://rtcp
        		m_pSRtcpAna->ParseRtcpPack(m_recvbuf,m_SendTCPReadSize,this);
        		TSever_LOG_Error();
        		break;
        	default:
        		TSever_LOG_Error("error streamchannel tpye");
        		break;
        	}

/*			int ret = sendto(m_UdpCliSckt, m_recvbuf+4, m_fNextTCPReadSize, 0, (struct sockaddr *) &m_WzaIp,sizeof(struct sockaddr_in));
			if (ret < 0)
			{
				TSever_LOG_Error("sento() error:%s", strerror(errno));
			}*/
            m_AlreadyNum = 0;
            fTCPReadingState = AWAITING_DOLLAR;
            m_SendTCPReadSize=0;
            bzero(m_recvbuf,sizeof(m_recvbuf));
        }
        break;
    }
    }

    m_ReadNumOneSc = m_ReadNumOneSc + num;

    evutil_gettimeofday(&m_Now, NULL);
    evutil_timersub(&m_Now,&m_Last,&diff);
    if (evutil_timercmp(&diff, &m_OneSc, >=))
    {
//        TSever_LOG_Error(".......................%d kbit/s,m_ReadNumOneSc=%dB,m_AlreadyNum=%d",m_ReadNumOneSc*8/1024,m_ReadNumOneSc,m_AlreadyNum);
        m_ReadNumOneSc=0;
        m_IsLastTimeWr=false;
    }



    return 0;
}
/*int CTcpAccepEvt::ReadData()
{
    int num;
    char* tmp = NULL;
    u_int8_t c;
    struct timeval diff;
    if (!m_IsLastTimeWr)
    {
        evutil_gettimeofday(&m_Last, NULL);
        m_IsLastTimeWr=true;
    }
    if (FIRSTREAD == fTCPReadingState)
    {
        TSever_LOG_Error();
        num = recv(m_ReadFd, m_recvfirst + m_AlreadyNumFirst, FIRSTRDLEN - m_AlreadyNumFirst, 0);
        if(0==num){
            TSever_LOG_Error("recv num =00000000000000000000000000000000000,FIRSTRDLEN - m_AlreadyNumFirst=%d",FIRSTRDLEN - m_AlreadyNumFirst);
            return -2;
        }
        else if (num <0)
        {
            TSever_LOG_Error("recv fTCPReadingState %d error:%s", FIRSTREAD, strerror(errno));
            return -1;
        }
        m_AlreadyNumFirst = m_AlreadyNumFirst + num;
        //    TSever_LOG_Error("revalread=%d num=%d", m_AlreadyNum, num);
        if (FIRSTRDLEN == m_AlreadyNumFirst)
        {
            if(GetDeviceInfo()<0)
            {
                return -2;
            }
            int ret = send(m_ReadFd, "ok", 2, 0);
            if (ret < 0)
            {
                TSever_LOG_Error("sento(ok) error:%s", strerror(errno));
                return -2;
            }
            m_AlreadyNumFirst = 0;
            fTCPReadingState = AWAITING_DOLLAR;
        }

    }
    else if (fTCPReadingState != AWAITING_PACKET_DATA)
    {
        num = recv(m_ReadFd, &c, 1, 0);
        if(0==num){
            TSever_LOG_Error("recv num =00000000000000000000000000000000000");
            return -2;
        }
        else if (num < 0)
        {
            TSever_LOG_Error("recv fTCPReadingState %d error:%s", fTCPReadingState, strerror(errno));
            return -1;
        }
    }
    switch (fTCPReadingState)
    {
    case AWAITING_DOLLAR:
    {
        if (c == '$')
        {
            fTCPReadingState = AWAITING_STREAM_CHANNEL_ID;
            m_recvbuf[0]=c;
        }
        break;
    }
    case AWAITING_STREAM_CHANNEL_ID:
    {
        m_fStreamChannelId = c;
//        TSever_LOG_Error("m_fStreamChannelId=%d",m_fStreamChannelId);
        fTCPReadingState = AWAITING_SIZE1;
        m_recvbuf[1]=c;
        break;
    }
    case AWAITING_SIZE1:
    {
        // The byte that we read is the first (high) byte of the 16-bit RTP or RTCP packet 'size'.
        m_fSizeByte1 = c;
        m_recvbuf[2]=c;
        fTCPReadingState = AWAITING_SIZE2;
        break;
    }
    case AWAITING_SIZE2:
    {
        // The byte that we read is the second (low) byte of the 16-bit RTP or RTCP packet 'size'.
        unsigned short size = (m_fSizeByte1 << 8) | c;
        m_fNextTCPReadSize=size;
        m_recvbuf[3]=c;
        fTCPReadingState = AWAITING_PACKET_DATA;
        break;
    }
    case AWAITING_PACKET_DATA:
    {
        num = recv(m_ReadFd, m_recvbuf + 4 + m_AlreadyNum, m_fNextTCPReadSize - m_AlreadyNum, 0);
        if (0 == num)
        {
            TSever_LOG_Error("recv num =00000000000000000000000000000000000,m_fNextTCPReadSize - m_AlreadyNum=%d",m_fNextTCPReadSize - m_AlreadyNum);
            return -2;
        }
        else if (num < 0)
        {
            TSever_LOG_Error("recv fTCPReadingState %d error:%s", AWAITING_PACKET_DATA, strerror(errno));
            return -1;
        }
        m_AlreadyNum = m_AlreadyNum + num;
        //    TSever_LOG_Error("revalread=%d num=%d", m_AlreadyNum, num);
        if (m_fNextTCPReadSize == m_AlreadyNum)
        {
            if (0 != m_SendToApp)
            {
                int ret = 0, pos = 0;
                m_SendTCPReadSize=m_fNextTCPReadSize+4;
                ret = write(m_SendToApp, m_recvbuf, m_SendTCPReadSize);
                if (ret < 0)
                {
                    TSever_LOG_Error("sento() error:%s", strerror(errno));
                }
                ****
                m_fNextTCPReadSize=m_fNextTCPReadSize-12;
                while (m_fNextTCPReadSize)
                {
                    TSever_LOG_Error("m_fNextTCPReadSize=%d",m_fNextTCPReadSize);
                    if ((ret = write(m_SendToApp, m_recvbuf + pos+4+12, m_fNextTCPReadSize)) == -1)
                    {
                        if((errno==EAGAIN)||(errno==EWOULDBLOCK))
                        {
                            TSever_LOG_Error("sento() error:%s m_SendTCPReadSize=%d", strerror(errno),m_fNextTCPReadSize);
                            continue;
                        }
                        else if(errno==EBADF)
                        {
                            TSever_LOG_Error("sento() error:%s", strerror(errno));
                            return -2;
                        }
                        else
                        {

                            TSever_LOG_Error("sento() error:%s", strerror(errno));
                            m_AlreadyNum = 0;
                            fTCPReadingState = AWAITING_DOLLAR;
                            m_SendTCPReadSize=0;
                            bzero(m_recvbuf,sizeof(m_recvbuf));
                            return -1;
                        }
                    }
                    m_fNextTCPReadSize = m_fNextTCPReadSize - ret;
                    TSever_LOG_Error("m_fNextTCPReadSize=%d",m_fNextTCPReadSize);
                    pos = pos + ret;
                }
                while (m_SendTCPReadSize)
                {
                    TSever_LOG_Error("m_SendTCPReadSize=%d",m_SendTCPReadSize);
                    if ((ret = write(m_SendToApp, m_recvbuf + pos, m_SendTCPReadSize)) == -1)
                    {
                        if((errno==EAGAIN)||(errno==EWOULDBLOCK))
                        {
                            TSever_LOG_Error("sento() error:%s m_SendTCPReadSize=%d", strerror(errno),m_SendTCPReadSize);
                            continue;
                        }
                        else if(errno==EBADF)
                        {
                            TSever_LOG_Error("sento() error:%s", strerror(errno));
                            return -2;
                        }
                        else
                        {

                            TSever_LOG_Error("sento() error:%s", strerror(errno));
                            m_AlreadyNum = 0;
                            fTCPReadingState = AWAITING_DOLLAR;
                            m_SendTCPReadSize=0;
                            bzero(m_recvbuf,sizeof(m_recvbuf));
                            return -1;
                        }
                    }
                    m_SendTCPReadSize = m_SendTCPReadSize - ret;
                    TSever_LOG_Error("m_SendTCPReadSize=%d",m_SendTCPReadSize);
                    pos = pos + ret;
                }
            }
                        int ret = sendto(m_UdpCliSckt, m_recvbuf, m_fNextTCPReadSize, 0, (struct sockaddr *) &m_WzaIp, sizeof(struct sockaddr_in));
             if (ret < 0)
             {
             TSever_LOG_Error("sento() error:%s", strerror(errno));
             }
            m_AlreadyNum = 0;
            fTCPReadingState = AWAITING_DOLLAR;
            m_SendTCPReadSize=0;
            bzero(m_recvbuf,sizeof(m_recvbuf));
        }
        break;
    }
    }

    m_ReadNumOneSc = m_ReadNumOneSc + num;

    evutil_gettimeofday(&m_Now, NULL);
    evutil_timersub(&m_Now,&m_Last,&diff);
    if (evutil_timercmp(&diff, &m_OneSc, >=))
    {
        TSever_LOG_Error(".......................%d kbit/s,m_ReadNumOneSc=%dB,m_AlreadyNum=%d",m_ReadNumOneSc*8/1024,m_ReadNumOneSc,m_AlreadyNum);
        m_ReadNumOneSc=0;
        m_IsLastTimeWr=false;
    }



    return 0;
}*/
/*int CTcpAccepEvt::ReadData()
{
    int num;
    char* tmp = NULL;
    struct timeval diff;
    if (!m_IsLastTimeWr)
    {
        evutil_gettimeofday(&m_Last, NULL);
        m_IsLastTimeWr=true;
    }
    if ((num = recv(m_ReadFd, m_recvbuf + m_AlreadyNum, MAXLEN - m_AlreadyNum, 0)) == -1)
    {
        TSever_LOG_Error("recv() error:%s", strerror(errno));
        return -1;
    }
    m_ReadNumOneSc = m_ReadNumOneSc + num;

    evutil_gettimeofday(&m_Now, NULL);
    evutil_timersub(&m_Now,&m_Last,&diff);
    if (evutil_timercmp(&diff, &m_OneSc, >=))
    {
        TSever_LOG_Error(".......................%d kbit/s,m_ReadNumOneSc=%dB,m_AlreadyNum=%d",m_ReadNumOneSc*8/1024,m_ReadNumOneSc,m_AlreadyNum);
        m_ReadNumOneSc=0;
        m_IsLastTimeWr=false;
    }

    m_AlreadyNum = m_AlreadyNum + num;
//    TSever_LOG_Error("revalread=%d num=%d", m_AlreadyNum, num);
    if (MAXLEN == m_AlreadyNum)
    {
        int ret = sendto(m_UdpCliSckt, m_recvbuf, MAXLEN, 0, (struct sockaddr *) &m_WzaIp, sizeof(struct sockaddr_in));
        if (ret < 0)
        {
            TSever_LOG_Error("sento() error:%s", strerror(errno));
        }
        m_AlreadyNum=0;
    }

    return 0;
}*/
int CTcpAccepEvt::WritedData()
{
}
} /* namespace myselfstock */
